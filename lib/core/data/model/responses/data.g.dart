// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'data.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

Data _$DataFromJson(Map<String, dynamic> json) => Data(
      after: json['after'] as String?,
      dist: json['dist'] as int?,
      modhash: json['modhash'] as String?,
      geo_filter: json['geo_filter'] as String?,
      before: json['before'] as String?,
      approved_at_utc: json['approved_at_utc'] as String?,
      subreddit: json['subreddit'] as String?,
      selftext: json['selftext'] as String?,
      author_fullname: json['author_fullname'] as String?,
      saved: json['saved'] as bool?,
      mod_reason_title: json['mod_reason_title'] as String?,
      gilded: json['gilded'] as int?,
      clicked: json['clicked'] as bool?,
      title: json['title'] as String?,
      link_flair_richtext: json['link_flair_richtext'] as List<dynamic>?,
      subreddit_name_prefixed: json['subreddit_name_prefixed'] as String?,
      hidden: json['hidden'] as bool?,
      pwls: json['pwls'] as int?,
      link_flair_css_class: json['link_flair_css_class'] as String?,
      downs: json['downs'] as int?,
      thumbnail_height: json['thumbnail_height'] as int?,
      top_awarded_type: json['top_awarded_type'] as String?,
      hide_score: json['hide_score'] as bool?,
      name: json['name'] as String?,
      quarantine: json['quarantine'] as bool?,
      link_flair_text_color: json['link_flair_text_color'] as String?,
      upvote_ratio: (json['upvote_ratio'] as num?)?.toDouble(),
      author_flair_background_color:
          json['author_flair_background_color'] as String?,
      subreddit_type: json['subreddit_type'] as String?,
      ups: json['ups'] as int?,
      total_awards_received: json['total_awards_received'] as int?,
      thumbnail_width: json['thumbnail_width'] as int?,
      author_flair_template_id: json['author_flair_template_id'] as String?,
      is_original_content: json['is_original_content'] as bool?,
      user_reports: json['user_reports'] as List<dynamic>?,
      is_reddit_media_domain: json['is_reddit_media_domain'] as bool?,
      is_meta: json['is_meta'] as bool?,
      category: json['category'] as String?,
      link_flair_text: json['link_flair_text'] as String?,
      can_mod_post: json['can_mod_post'] as bool?,
      score: json['score'] as int?,
      approved_by: json['approved_by'] as String?,
      isCreatedFromAdsUi: json['isCreatedFromAdsUi'] as bool?,
      authorPremium: json['authorPremium'] as bool?,
      thumbnail: json['thumbnail'] as String?,
      authorFlairCssClass: json['authorFlairCssClass'] as String?,
      authorFlairRichtext: json['authorFlairRichtext'] as List<dynamic>?,
      postHint: json['postHint'] as String?,
      contentCategories: json['contentCategories'] as String?,
      isSelf: json['isSelf'] as bool?,
      modNote: json['modNote'] as String?,
      created: (json['created'] as num?)?.toDouble(),
      linkFlairType: json['linkFlairType'] as String?,
      wls: json['wls'] as int?,
      removedByCategory: json['removedByCategory'] as String?,
      bannedBy: json['bannedBy'] as String?,
      authorFlairType: json['authorFlairType'] as String?,
      domain: json['domain'] as String?,
      allowLiveComments: json['allowLiveComments'] as bool?,
      selftextHtml: json['selftextHtml'] as String?,
      likes: json['likes'] as String?,
      suggestedSort: json['suggestedSort'] as String?,
      bannedAtUtc: json['bannedAtUtc'] as String?,
      viewCount: json['viewCount'] as String?,
      archived: json['archived'] as bool?,
      noFollow: json['noFollow'] as bool?,
      isCrosspostable: json['isCrosspostable'] as bool?,
      pinned: json['pinned'] as bool?,
      over18: json['over18'] as bool?,
      allAwardings: json['allAwardings'] as List<dynamic>?,
      awarders: json['awarders'] as List<dynamic>?,
      mediaOnly: json['mediaOnly'] as bool?,
      linkFlairTemplateId: json['linkFlairTemplateId'] as String?,
      canGild: json['canGild'] as bool?,
      spoiler: json['spoiler'] as bool?,
      locked: json['locked'] as bool?,
      authorFlairText: json['authorFlairText'] as String?,
      treatmentTags: json['treatmentTags'] as List<dynamic>?,
      visited: json['visited'] as bool?,
      removedBy: json['removedBy'] as String?,
      numReports: json['numReports'] as String?,
      distinguished: json['distinguished'] as String?,
      subredditId: json['subredditId'] as String?,
      authorIsBlocked: json['authorIsBlocked'] as bool?,
      modReasonBy: json['modReasonBy'] as String?,
      removalReason: json['removalReason'] as String?,
      linkFlairBackgroundColor: json['linkFlairBackgroundColor'] as String?,
      id: json['id'] as String?,
      isRobotIndexable: json['isRobotIndexable'] as bool?,
      reportReasons: json['reportReasons'] as String?,
      author: json['author'] as String?,
      discussionType: json['discussionType'] as String?,
      numComments: json['numComments'] as int?,
      sendReplies: json['sendReplies'] as bool?,
      whitelistStatus: json['whitelistStatus'] as String?,
      contestMode: json['contestMode'] as bool?,
      modReports: json['modReports'] as List<dynamic>?,
      authorPatreonFlair: json['authorPatreonFlair'] as bool?,
      authorFlairTextColor: json['authorFlairTextColor'] as String?,
      permalink: json['permalink'] as String?,
      parentWhitelistStatus: json['parentWhitelistStatus'] as String?,
      stickied: json['stickied'] as bool?,
      url: json['url'] as String?,
      subredditSubscribers: json['subredditSubscribers'] as int?,
      createdUtc: json['createdUtc'] as int?,
      numCrossposts: json['numCrossposts'] as int?,
      isVideo: json['isVideo'] as bool?,
      urlOverriddenByDest: json['urlOverriddenByDest'] as String?,
      children: (json['children'] as List<dynamic>?)
          ?.map((e) => GeneralResponse.fromJson(e as Map<String, dynamic>))
          .toList(),
    );

Map<String, dynamic> _$DataToJson(Data instance) => <String, dynamic>{
      'after': instance.after,
      'dist': instance.dist,
      'modhash': instance.modhash,
      'geo_filter': instance.geo_filter,
      'before': instance.before,
      'children': instance.children,
      'approved_at_utc': instance.approved_at_utc,
      'subreddit': instance.subreddit,
      'selftext': instance.selftext,
      'author_fullname': instance.author_fullname,
      'saved': instance.saved,
      'mod_reason_title': instance.mod_reason_title,
      'gilded': instance.gilded,
      'clicked': instance.clicked,
      'title': instance.title,
      'link_flair_richtext': instance.link_flair_richtext,
      'subreddit_name_prefixed': instance.subreddit_name_prefixed,
      'hidden': instance.hidden,
      'pwls': instance.pwls,
      'link_flair_css_class': instance.link_flair_css_class,
      'downs': instance.downs,
      'thumbnail_height': instance.thumbnail_height,
      'top_awarded_type': instance.top_awarded_type,
      'hide_score': instance.hide_score,
      'name': instance.name,
      'quarantine': instance.quarantine,
      'link_flair_text_color': instance.link_flair_text_color,
      'upvote_ratio': instance.upvote_ratio,
      'author_flair_background_color': instance.author_flair_background_color,
      'subreddit_type': instance.subreddit_type,
      'ups': instance.ups,
      'total_awards_received': instance.total_awards_received,
      'thumbnail_width': instance.thumbnail_width,
      'author_flair_template_id': instance.author_flair_template_id,
      'is_original_content': instance.is_original_content,
      'user_reports': instance.user_reports,
      'is_reddit_media_domain': instance.is_reddit_media_domain,
      'is_meta': instance.is_meta,
      'category': instance.category,
      'link_flair_text': instance.link_flair_text,
      'can_mod_post': instance.can_mod_post,
      'score': instance.score,
      'approved_by': instance.approved_by,
      'isCreatedFromAdsUi': instance.isCreatedFromAdsUi,
      'authorPremium': instance.authorPremium,
      'thumbnail': instance.thumbnail,
      'authorFlairCssClass': instance.authorFlairCssClass,
      'authorFlairRichtext': instance.authorFlairRichtext,
      'postHint': instance.postHint,
      'contentCategories': instance.contentCategories,
      'isSelf': instance.isSelf,
      'modNote': instance.modNote,
      'created': instance.created,
      'linkFlairType': instance.linkFlairType,
      'wls': instance.wls,
      'removedByCategory': instance.removedByCategory,
      'bannedBy': instance.bannedBy,
      'authorFlairType': instance.authorFlairType,
      'domain': instance.domain,
      'allowLiveComments': instance.allowLiveComments,
      'selftextHtml': instance.selftextHtml,
      'likes': instance.likes,
      'suggestedSort': instance.suggestedSort,
      'bannedAtUtc': instance.bannedAtUtc,
      'viewCount': instance.viewCount,
      'archived': instance.archived,
      'noFollow': instance.noFollow,
      'isCrosspostable': instance.isCrosspostable,
      'pinned': instance.pinned,
      'over18': instance.over18,
      'allAwardings': instance.allAwardings,
      'awarders': instance.awarders,
      'mediaOnly': instance.mediaOnly,
      'linkFlairTemplateId': instance.linkFlairTemplateId,
      'canGild': instance.canGild,
      'spoiler': instance.spoiler,
      'locked': instance.locked,
      'authorFlairText': instance.authorFlairText,
      'treatmentTags': instance.treatmentTags,
      'visited': instance.visited,
      'removedBy': instance.removedBy,
      'numReports': instance.numReports,
      'distinguished': instance.distinguished,
      'subredditId': instance.subredditId,
      'authorIsBlocked': instance.authorIsBlocked,
      'modReasonBy': instance.modReasonBy,
      'removalReason': instance.removalReason,
      'linkFlairBackgroundColor': instance.linkFlairBackgroundColor,
      'id': instance.id,
      'isRobotIndexable': instance.isRobotIndexable,
      'reportReasons': instance.reportReasons,
      'author': instance.author,
      'discussionType': instance.discussionType,
      'numComments': instance.numComments,
      'sendReplies': instance.sendReplies,
      'whitelistStatus': instance.whitelistStatus,
      'contestMode': instance.contestMode,
      'modReports': instance.modReports,
      'authorPatreonFlair': instance.authorPatreonFlair,
      'authorFlairTextColor': instance.authorFlairTextColor,
      'permalink': instance.permalink,
      'parentWhitelistStatus': instance.parentWhitelistStatus,
      'stickied': instance.stickied,
      'url': instance.url,
      'subredditSubscribers': instance.subredditSubscribers,
      'createdUtc': instance.createdUtc,
      'numCrossposts': instance.numCrossposts,
      'isVideo': instance.isVideo,
      'urlOverriddenByDest': instance.urlOverriddenByDest,
    };
